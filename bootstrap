#!/usr/bin/env bash
#
# bootstrap serves as a onetime manager for stitching a profile
# of dotfiles together.
# The files will have the naming convention basefile.profile
# Run bootstrap with an arbitrary number of profiles
# (3 profile example below),
#    $ ./boostrap profile3 profile2 profile1
# This will cause .basename files to be created with profile1
# appended to profile2 appended to profile3. In this way profile3
# will act as a base (i.e. general) dotfile with profile2 overriding
# any common attributes in profile3 and profile1 doing the same in
# profile2. This could be usefule if there are some general settings
# which can be shared accross users and then team specific profiles
# and/or user specific profiles

cd "$(dirname "$0")"
DOTFILES_ROOT=$HOME
profiles="$@"
declare -a dotfiles

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

install_dotfiles () {
  info 'installing dotfiles'
  for prf in $profiles
  do
    setup $prf
  done
  transfer
}

transfer () {
  unique_dotfiles=$(printf "%s\n" "${dotfiles[@]}" | sort -u | tr "\n" " ")
  for dotfile in $unique_dotfiles
  do
    perm="$HOME/$dotfile"
    if [ -f $perm -o -d $perm -o -L $perm ]
    then
      backup $perm
    fi
    mv "$dotfile" "$perm"
  if [ -f "$perm" -o -d "$perm" -o -L "$perm" ] 
  then
    success "created $perm"
  else
    fail "could not create $perm"
  fi
  done
}

setup () {
  local prf=$1
  info "setup $prf"
  addons=$(find *.$prf)
  for addon in $addons
  do
    # cut base.prf into .base
    dot=".$(echo "$addon" | cut -d . -f 1)"
    dotfiles+=("$dot")
    append $dot $addon
  done
}

append () {
  local base=$1 addon=$2
  info "appending $addon to $base"
  cat "$addon" >> "$base"
  if [ -f "$base" -o -d "$base" -o -L "$base" ] 
  then
    success "appended $addon to $base"
  else
    fail "could not append $addon to $base"
  fi
}

backup () {
  local oldfile=$1
  info "backing up $oldfile"
  mv "$oldfile" "$oldfile.backup"
  if [ -f "$oldfile.backup" -o -d "$oldfile.backup" -o -L "$oldfile.backup" ] 
  then
    success "backed up $oldfile as $oldfile.backup"
  else
    fail "could not back up $oldfile"
  fi
}

install_dotfiles
